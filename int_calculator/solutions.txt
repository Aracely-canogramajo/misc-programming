$Id: soln-cmps109-2019q1-final.txt,v 1.3 2019-03-12 17:09:31-07 - - $
Solution to CMPS-109 2019q1-midterm, page 1

_________________________________________________________________
Question 1. [2]

template <typename pair1, typename pair2>
bool operator< (const pair1& p1, const pair2& p2) {
   return p1.first < p2.first
       or not (p2.first < p1.first) and p1.second < p2.second;
}

_________________________________________________________________
Question 2(a). [4]

template <typename item_t, typename less_t>
bool bstset<item_t,less_t>::contains (const item_t key) {
   node* t = root;
   while (t != nullptr) {
      if (less (key, t->item)) t = t->left;
      else if (less (t->item, key)) t = t->right;
      else return true;
   }
   return false;
}

_________________________________________________________________
Question 2(b). [1]

~bstset() { if (root != nullptr) delete root; }

_________________________________________________________________
Question 2(c). [3]

template <typename item_t, typename less_t>
bstset<item_t,less_t>::bstset::node::~node() {
   if (left != nullptr) delete left;
   if (right != nullptr) delete right;
}


Solution to CMPS-109 2019q1-midterm, page 2

_________________________________________________________________
Question 3. [3]

polynomial differentiate (const polynomial& p) {
   polynomial r;
   for (size_t i = 1; i < v.size(); ++i) {
      r.push_back (v[i] * i);
   }
   return r;
}   

_________________________________________________________________
Question 4. [2]

template <typename in_itor, typename out_itor, typename predicate>
void copy_if (in_itor begin, in_itor end, out_itor out, predicate p) {
   for (; begin != end; ++begin) {
      if (p (*begin)) { *out = *begin; ++out; }
   }
}

_________________________________________________________________
Question 5. [1]

const GLubyte BLACK[] = { 0, 0, 0 };
const GLubyte WHITE[] = { 255, 255, 255 };
// obviously 0xFF is OK too.

_________________________________________________________________
Question 6. [4]

void draw_chessboard (GLfloat xpos, GLfloat ypos, GLfloat sqsize) {
   for (size_t row = 0; row < 8; ++row) {
      for (size_t col = 0; col < 8; ++col) {
         size_t llx = xpos + row * sqsize;
         size_t lly = ypos + col * sqsize;
         const GLubyte* color = (row + col) % 2 == 0 ? BLACK : WHITE;
         glBegin (GL_POLYGON);
         glColor3ubv (color);
         glVertex2f (llx, lly);
         glVertex2f (llx + sqsize, lly);
         glVertex2f (llx + sqsize, lly + sqsize);
         glVertex2f (llx, lly + sqsize);
         glEnd();
      }
   }
}


Solution to CMPS-109 2019q1-midterm, page 3

_________________________________________________________________
Question 7. [1]

foo& operator++();
foo operator++ (int);

_________________________________________________________________
Question 8. [3]

template <typename Initor1, typename Initor2,
          typename Outitor, typename Less>
void merge (Initor1 begin1, Initor1 end1,
            Initor2 begin2, Initor2 end2,
            Outitor result, Less less) {
   while (begin1 != end1 and begin2 != end2) {
      if (less (*begin1, *begin2)) *result++ = *begin1++;
                              else *result++ = *begin2++;
   }
   while (begin1 != end1) *result++ = *begin1++;
   while (begin2 != end2) *result++ = *begin2++;
}

_________________________________________________________________
Question 9(a). [3]

class animal {
   private:
      const string name_;
   public:
      animal (const string& name): name_(name) {}
      virtual ~animal() {}
      virtual const string& name() const { return name_; };
      virtual string noise() const = 0;
};

_________________________________________________________________
Question 9(b). [3]

class dog: public animal {
   public:
      dog (const string& name): animal(name) {}
      virtual string noise() const override { return "woof"; }
};

class cat: public animal {
   public:
      cat (const string& name): animal(name) {}
      virtual string noise() const override { return "meow"; }
};


Solution to CMPS-109 2019q1-midterm, page 4

 1.   (C) constexpr size_t MAX = 10;

 2.   (C) template <typename T> class stack

 3.   (B) list

 4.   (B)      20

 5.   (C) override

 6.   (C) unordered_set

 7.   (B) operator<

 8.   (A) *(c.end()-1)

 9.   (D) c.begin()==c.end()

10.   (D) auto p = new string();

11.   (C) 0x78563412

12.   (B) i->second


Solution to CMPS-109 2019q1-midterm, page 5

 1.   (D) vector

 2.   (C) foo::~foo

 3.   (D) 2 * sizeof (uintptr_t)

 4.   (B) 16

 5.   (B) {127,   0,   0};

 6.   (A) at compile time

 7.   (C) reinterpret_cast

 8.   (C) xmap::mapped_type

 9.   (A) $<

10.   (A)       1

11.   (B) catch (exception& exn)

12.   (D) 128

//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
$Id: soln-cmps109-2019q1-midterm.txt,v 1.8 2019-02-14 17:35:09-08 - - $
Solution to CMPS-109 2019q1-midterm, page 1

_________________________________________________________________
Question 1. [1]

#include <iostream>
using namespace std;
int main (int argc, char**) {
   cout << "Hello, World!" << endl;
   return 0; //// or return EXIT_SUCCESS if #included <cstdlib>
}

_________________________________________________________________
Question 2. [3]

class iterator {
   public:
      iterator& operator++();
      bool operator!= (const iterator&) const;
      const foo& operator* () const; //// can return foo or anything
      foo& operator* (); //// question doesn't say iterator of what
}

_________________________________________________________________
Question 3(a). [3]

void ubigint::divide_by_2() {
   for (size_t i = 0; i < uvalue.size() - 1; ++i) {
      uvalue[i] /= 2;
      if (uvalue[i + 1] & 1) uvalue[i] += 5;
   }
   if (uvalue.size() > 0) uvalue[uvalue.size() - 1] /= 2;
}

_________________________________________________________________
Question 3(b). [3]

void ubigint::multiply_by_2() {
   size_t carry = 0;
   for (size_t i = 0; i < uvalue.size() - 1; ++i) {
      size_t sum = uvalue[i] * 2 + carry;
      uvalue[i] = sum % 10;
      carry = sum / 10;
   }
   if (carry != 0) uvalue.push_back (carry);
}


Solution to CMPS-109 2019q1-midterm, page 2

_________________________________________________________________
Question 4. [1]

for (auto p = cont.begin(); p != cont.end(); ++p) foo (*p);

_________________________________________________________________
Question 5. [2]

int main() {
   map<string,size_t> m;
   string word;
   while (cin >> word) ++m[word];
   for (const auto& p: m) {
      cout << p.first() << " " << p.second() << endl;
   }
   return 0;
}

_________________________________________________________________
Question 6. [2]

template <typename in_itor, typename out_itor>
void copy (in_itor in_begin, in_itor in_end, out_itor out_begin) {
   while (in_begin != in_end) *out_begin++ = *in_begin++;
}

_________________________________________________________________
Question 7. [5]

template <typename item_t>
class stack {
   private:
      vector<item_t> stk;
   public:
      void pop() { stk.pop_back(); }
      item_t& top() { return stk.back(); }
      void push (const item_t& item) { stk.push_back (item); }
      bool empty() { return stk.empty(); }
}


Solution to CMPS-109 2019q1-midterm, page 3
_________________________________________________________________
Question 8. [2]
foo();
foo (const foo&);
foo (foo&&);
foo& operator= (const foo&);
foo& operator= (foo&&);
~foo();
_________________________________________________________________
Question 9. [2]
template <class T>
inline bool operator!= (const T& x, const T& y) { return not (x == y);
template <class T>
inline bool operator>  (const T& x, const T& y) { return y < x;
template <class T>
inline bool operator<= (const T& x, const T& y) { return not (y < x);
template <class T>
inline bool operator>= (const T& x, const T& y) { return not (x < y);

_________________________________________________________________
Question 10. [2]

// The question as stated contains an error, namely that no value
// to search for is given as an argument.  An extra template
// argument and function argument must be given.  Accept any
// reasonable modification to the questions, such as is presented
// here, or otherwise makes some sense.
template <typename iterator, typename wanted, class comparator>
iterator find (iterator begin, iterator end, const wanted& want,
               comparator equal) {
   while (begin != end and not equal (*begin, want)) ++begin;
   return begin;
}
_________________________________________________________________
Question 11. [2]

template <typename iterator, class predicate>
iterator find_if (iterator begin, iterator end, predicate pred) {
   while (begin != end and not pred (*begin)) ++begin;
   return begin;
}
_________________________________________________________________
Question 12. [2]

template <typename iterator, class less_fn>
iterator find_min (iterator begin, iterator end, less_fn less) {
   if (begin == end) return end;
   iterator min = begin++;
   for (; begin != end; ++begin) {
      if (less (*begin, *min)) min = begin;
   }
   return min;
}

Solution to CMPS-109 2019q1-midterm, page 4

 1.   (A) c.begin() - c.end()

 2.   (D) vector

 3.   (B) prog 1>foo.out 2>&1

 4.   (B) list

 5.   (D) Grants B access to the private parts of A,
          but not vice-versa.

 6.   (B) foo (const foo &);

 7.   (C) using namespace std;

 8.   (C) <iostream>

 9.   (C) member function

10.   (C) if (this == &that)

11.   (A) ++i

12.   (B) a pointer

//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
$Id: soln-cmps109-2019q2-final.txt,v 1.12 2019-06-07 15:31:06-07 - - $
Solution to CMPS-109 2019q2-final, page 1

_________________________________________________________________
Question 1. [2]


|void f(int);          Ad-hoc    |class baz: private qux { Universal
|void f(string);       Overload  |};                       Inclusion

|template <typename T> Universal  |void f(double);          Ad-hoc
|T sum (T*);           Parametric |int x; f(x);             Conversion

_________________________________________________________________
Question 2. [2]

class foo {
   foo();
   foo (const foo&);
   foo (foo&&);
   foo& operator= (const foo&);
   foo& operator= (foo&&);
   ~foo();

_________________________________________________________________
Question 3. [2]

| black  {0x00, 0x00, 0x00}; | blue    {0x00, 0x00, 0xFF};
| green  {0x00, 0xFF, 0x00}; | cyan    {0x00, 0xFF, 0xFF};
| red    {0xFF, 0x00, 0x00}; | magenta {0xFF, 0x00, 0xFF};
| yellow {0xFF, 0xFF, 0x00}; | white   {0xFF, 0xFF, 0xFF};

_________________________________________________________________
Question 4. [2]

    | class foo { // as members | // Not as members of class foo.
++x | foo& operator++();        | foo& operator++ (foo&);
x++ | foo operator++ (int);     | foo operator++ (foo&, int);

_________________________________________________________________
Question 5. [2]

size_t lockbox::swap (size_t argval) {
   unique_lock<mutex> unique (lock);
   size_t result = value;
   value = argval;
   return result;
}


Solution to CMPS-109 2019q2-final, page 2

_________________________________________________________________
Question 6. [1]
void ubigint::trim() {
   while (value.size() > 0 and value.back() == 0) value.pop_back();
}

_________________________________________________________________
Question 7. [2]
template <typename itor, typename less_t = less<decltype(*itor())>>
itor minimum (itor begin, itor end, less_t less = less_t()) {
   if (begin == end) return end;
   auto small = begin++;
   for (; begin != end; ++begin) {
      if (less (*begin, *small)) small = begin;
   }
   return small;
}

_________________________________________________________________
Question 8(a). [2]
lass number: public expr {
   private:
      double value {};
   public:
      number (double v = 0): value(v) {}
      virtual double eval() const override { return value; }
      virtual void print (ostream& out) const override { out << value; }
};

_________________________________________________________________
Question 8(b). [4]
class adder: public expr {
   private:
      expr_ptr left;
      expr_ptr right;
   public:
      adder (expr_ptr left, expr_ptr right): left(left), right(right) {}
      virtual double eval() const override {
         return left->eval() + right->eval();
      }
      virtual void print (ostream& out) const override {
         out << "(" << left << "+" << right << ")";
      }
};

_________________________________________________________________
Question 8(c). [1]
ostream& operator<< (ostream& out, const expr_ptr& ptr) {
   ptr->print (out);
   return out;
}


Solution to CMPS-109 2019q2-final, page 3
_________________________________________________________________
Question 9. [2]
template <typename itor>
double inner_product (itor begin1, itor end1, itor begin2, itor end2) { 
   double result = 0;
   while (begin1 != end1 and begin2 != end2) {
      result += *begin1++ * *begin2++;
   }
   if (begin1 != end1 or begin2 != end2) throw domain_error ("ip");
   return result;
}
_________________________________________________________________
Question 10. [2]
void draw_purple_square (GLfloat xpos, GLfloat ypos, GLfloat length) {
   glBegin (GL_POLYGON);
   static GLubyte purple[] {160, 32, 240};
   glColor3ubv (purple);
   xpos -= length / 2;
   ypos -= length / 2;
   glVertex2f (xpos, ypos);
   glVertex2f (xpos + length, ypos);
   glVertex2f (xpos + length, ypos + length);
   glVertex2f (xpos, ypos + length);
   glEnd();
}
_________________________________________________________________
Question 11. [2]
   for (GLfloat theta = 0; theta < 2.0 * M_PI; theta += delta) {
      GLfloat xpos = xcenter + radius * cos (angle);
      GLfloat ypos = ycenter + radius * sin (angle);
      glVertex2f (xpos, ypos);
   }
_________________________________________________________________
Question 12. [2]
class thing::iterator {
 private:
    int* curr; // OK if this field now shown in answer paper.
 public:
    bool operator!= (const iterator& that) { return curr != that.curr; }
    int& operator* () { return *curr; }
    iterator& operator++() { ++curr; return *this; }
}
_________________________________________________________________
Question 13. [2]
template <typename itor>
bool equal (iter b1, itor e1, itor b2, itor e2) {
   while (b1 != e1 and b2 != e2){
      if (*b1++ != *b2++) return false;
   }
   return b1 == e1 and b2 == e2;
}

Solution to CMPS-109 2019q2-final, page 4

 1.   (D) vector

 2.   (C) delete[] p

 3.   (B) double

 4.   (D) vector

 5.   (D) popen(3)

 6.   (C) fork(2)

 7.   (C) g++ -c

 8.   (B) explicit

 9.   (D) 78

10.   (A) cos

11.   (C) n = reinterpret_cast<uintptr_t>(p);

12.   (D) parametric


Solution to CMPS-109 2019q2-final, page 5

 1.   (C) ostream

 2.   (C) 2>foo

 3.   (C) char[4]

 4.   (C) cyclic graph

 5.   (A) {  0,  0,  0}

 6.   (C) operator bool() const;

 7.   (D) delete[] p

 8.   (A)  8

 9.   (B) .*?

10.   (D) $@

11.   (D) #ifndef __FOO_H__

12.   (D) size_t size() const;

//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
//-----------------------------------------------------------------------

$Id: soln-cmps109-2019q3-final.txt,v 1.6 2019-08-15 14:00:55-07 - - $
Solution to CMPS-109 2019q3-final, page 1

Any logically correct variation on these answers is ok too.
Assign fractional points in increments of 1/2 per question.

_________________________________________________________________
Question 1. [3]

bool ubigint::operator< (const ubigint& that) {
   if (ubigvalue.size() < that.ubigvalue.size()) return true;
   if (ubigvalue.size() > that.ubigvalue.size()) return false;
   for (ssize_t i = ubigvalue.size() - 1; i >= 0; --i) {
      if (ubigvalue[i] < that.ubigvalue[i]) return true;
      if (ubigvalue[i] > that.ubigvalue[i]) return false;
   }
   return false;
}

_________________________________________________________________
Question 2. [3]

const GLubyte RED[] = {0xFF, 0x00, 0x00}; //// ALSO:  {255,0,0} ////
void draw_red_diamond (GLfloat xcenter, GLfloat ycenter,
                       GLfloat width, GLfloat height) {
   glBegin (GL_POLYGON);
   glColor3ubv (RED);
   glVertex2f (xcenter + width / 2, ycenter);
   glVertex2f (xcenter, ycenter + height / 2);
   glVertex2f (xcenter - width / 2, ycenter);
   glVertex2f (xcenter, ycenter - height / 2);
   glEnd();
}

_________________________________________________________________
Question 3. [4]

template <typename itor, typename item_t, class less_t>
itor binary_search (itor begin, itor original_end,
                    const item_t& item, less_t less) {
   auto end = original_end;
   while (begin < end) {
      itor mid = begin + (end - begin) / 2;
      if (less (*mid, item)) begin = mid + 1;
      else if (less (item, *mid)) end = mid;
      else return mid;
   }
   return original_end;
}
//// May also use integer indices, such as begin[i] using
//// begin as a subscripted array with left,mid,right as size_t


Solution to CMPS-109 2019q3-final, page 2

_________________________________________________________________
Question 4. [1]

foo operator+ (const foo& a, const foo& b) {
   foo result = a;
   return a += b;
}

_________________________________________________________________
Question 5. [1]

+-----------------------------+-----------------------------+
|void f(int);                 | class baz: private qux {    |
|void f(string);          A O | };                      U I |
+-----------------------------+-----------------------------+
|template <typename T>        | void f(double);             |
|T sum (T*);              U P | int x; f(x);            A C |
+-----------------------------+-----------------------------+

_________________________________________________________________
Question 6.

struct complex {
   double real = 0.0; double imag = 0.0; //// (a)

   complex (double re = 0.0, double im = 0.0): real(re), imag(im) {
   } //// (b)

   complex& operator+= (const complex& that) {
      real += that.real; imag += that.imag;
   } //// (c)

   operator bool() {
      return real != 0.0 or imag != 0.0;
   } //// (d)

_________________________________________________________________
Question 7. [4]

template <typename Initor1, typename Initor2,
          typename Outitor, typename Less>
void merge (Initor1 begin1, Initor1 end1,
            Initor2 begin2, Initor2 end2,
            Outitor result, Less less) {
   while (begin1 != end1 and begin2 != end2) {
      if (less (*begin1, *begin2)) *result++ = *begin1++;
                              else *result++ = *begin2++;
   }
   while (begin1 != end1) *result++ = *begin1++;
   while (begin2 != end2) *result++ = *begin2++;
}


Solution to CMPS-109 2019q3-final, page 3

_________________________________________________________________
Question 8. [2]

double inner_product (const vector<double>& a,
                      const vector<double>& b) {
   if (a.size() != b.size()) throw domain_error ("inner_product");
   double sum = 0;
   for (size_t i = 0; i < a.size(); ++i) sum += a[i] * b[i];
   return sum;
}

_________________________________________________________________
Question 9(a). [3]

template <typename item_t>
class forward_list<item_t>::iterator {
  private:
    node* curr;
  public:
    iterator (node* p): curr(p) {}
    item_t& operator* () { return curr->item; }
    iterator& operator++() { curr = curr-> link; return *this; }
    bool operator!= (iterator& that) { return curr != that.curr; }
};

_________________________________________________________________
Question 9(b). [3]

template <typename item_t>
void forward_list<item_t>::pop_font() {
  node* t = head;
  head = head->link;
  delete t;
}

_________________________________________________________________
Question 9(c). [2]

template <typename item_t>
forward_list<item_t>::~forward_list() {
  while (not empty()) pop_front();
}


Solution to CMPS-109 2019q3-final, page 4

 1.   (A) explicit

 2.   (D) socket

 3.   (C)   24

 4.   (B) ostream&

 5.   (B) list<int> c; //// accept either answer
      (C) map<int> c;  //// accept either answer

 6.   (D) the destructor

 7.   (A)  8

 8.   (D) v[5]

 9.   (C) **argv

10.   (C) foo* operator->();

11.   (C) typedef unsigned char GLubyte;

12.   (C) foo (foo&&);



Solution to CMPS-109 2019q3-final, page 5

 1.   (D) vector<char>

 2.   (B) list

 3.   (B) .*?

 4.   (D) foo >bar 2>&1

 5.   (B) foo operator++ (foo&, int);

 6.   (D) 78

 7.   (B) std::cerr

 8.   (B) ls -a

 9.   (C) hash table

10.   (C) reinterpret_cast

11.   (B) return *this;

12.   (C) $ O ( n ) $

//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
//-----------------------------------------------------------------------

$Id: soln-cse111-2019q4-final.txt,v 1.1 2019-12-11 12:23:07-08 - - $
Solution to CMPS-109 2019q3-final, page 1

Any logically correct variation on these answers is ok too.
Assign fractional points in increments of 1/2 per question.

_________________________________________________________________
Question 1(a). [4]

class expr {
public:
   virtual double eval() const = 0;
   virtual void print (ostream&) const = 0;
   virtual ~expr() = default;
   expr() = default;
   expr (const expr&) = delete;
   expr (expr&&) = delete; 
   expr& operator= (const expr&) = delete;
   expr& operator= (expr&&) = delete; 
};

_________________________________________________________________
Question 1(b). [2]

class leaf: public expr {
      double value
   public:
      leaf (double v = 0): value(v) {}
      virtual double eval() const override { return value; }
      virtual void print (ostream& out) const override { out << value; }
};
// "virtual" is not needed when override is used, but not wrong.

_________________________________________________________________
Question 1(c). [4]

class tree: public leaf {
   expr* left; expr* right;
public:
   tree (expr* lf =nullptr, expr* rt=nullptr): left(lf), right(rt) {}
   virtual ~tree() { delete left; delete right; }
   virtual double eval() const override {
      if (left == nullptr or right == nullptr) throw null_tree_error();
      return left->eval() + right->eval();
   }
   virtual void print (ostream& out) const override {
      if (left == nullptr or right == nullptr) throw null_tree_error();
      out << "("; left->print(); out << "+"; right->print(); out << ")";
   }
};
// "virtual" is not needed when override is used, but not wrong.

Solution to CMPS-109 2019q3-final, page 2

_________________________________________________________________
Question 2. [2]

template <typename T>
ostream& operator<< (ostream& out, const T& cont) {
   cout << "{";
   string comma = "";
   for (const auto& i: cont) {
      cout << comma << i;
      comma = ",";
   }
   return cout << "}";
}

_________________________________________________________________
Question 3. [3]

template <typename container>
bool palindrome (const container& cont) {
   auto begin = cont.begin();
   auto end = cont.end();
   while (begin != end and begin != --end) {
      if (*begin != *end) return false;
      ++begin;
   }
   return true;
}

_________________________________________________________________
Question 4. [2]

template <typename container>
void test_palindrome (const container& cont) {
   cout << boolalpha << palindrome (cont);
   for (const auto& item: cont) cout << " " << item;
   cout << endl;
}


_________________________________________________________________
Question 5. [3]

bool ubigint::operator< (const ubigint& that) const { 
   if (ubigvalue.size() < that.ubigvalue.size()) return true;
   if (ubigvalue.size() > that.ubigvalue.size()) return false;
   if (ubigvalue.size() == 0) return false;
   for (size_t i = ubigvalue.size() - 1; i > 0; --i) {
      if (ubigvalue[i] < that.ubigvalue[i]) return true;
      if (ubigvalue[i] > that.ubigvalue[i]) return false;
   }
   return ubigvalue[0] < that.ubigvalue[0];
}

Solution to CMPS-109 2019q3-final, page 3
_________________________________________________________________
Question 6. [1]
for file in test*.ydc
do
   ydc <$file >$file.out
done

_________________________________________________________________
Question 7. [1]
void f(int);           A O  |class baz: private qux    U I
void f(string);             |};
template <typename T>  U P  |void f(double);           A C
T sum (T*);                 |int x; f(x);

_________________________________________________________________
Question 8. [1]
template <typename value>
inline bool operator>  (const value& left, const value& right) {
   return right < left; 
}
_________________________________________________________________
Question 9. [1]
foo operator++ (foo& item, int) {
   foo result = item;
   ++item;
   return result;
}
_________________________________________________________________
Question 10. [1]
operator bool() const { return pointer != nullptr; }

_________________________________________________________________
Question 11. [1]
bigint operator+ (const bigint& left, const bigint& right) {
   bigint result = left;
   return result += right;
}
_________________________________________________________________
Question 12. [2]
template <typename T>
T max (const T& one, const T& two) {
   return one < two ? two : one;
}
_________________________________________________________________
Question 13. [2]
all : ${EXECBIN}
${EXECBIN} : ${OBJECTS}
	${GPP} -o $@ ${OBJECTS}
%.o : %.cpp
	${GPP} -c $<

Solution to CMPS-109 2019q3-final, page 4

 1.   (B) pair<const string, double>

 2.   (C) vector is $ O ( n ) $;  list is $ O ( 1 ) $

 3.   (C) reinterpret_cast

 4.   (D) socket(2)

 5.   (B) $@

 6.   (D) virtual

 7.   (D) operator bool() const;

 8.   (A) operator()

 9.   (C) ostream& operator<< (ostream&, const foo&);

10.   (A) signal & 0x7F

11.   (A) explicit

12.   (D) yes


Solution to CMPS-109 2019q3-final, page 5

 1.   (D) 0x78

 2.   (C) memory leak

 3.   (B) int

 4.   (B) return map::end()

 5.   (C) #ifndef __FOO_H__

 6.   (C) v.size() == v.end() - v.begin()

 7.   (C) bidirectional

 8.   (C) listen(2)

 9.   (D) YELLOW

10.   (B) p->second

11.   (C) not (a < b) and not (b < a)

12.   (A) daemon


//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
//-----------------------------------------------------------------------